// Generated by CoffeeScript 1.6.2
var attributeClass, blazeAttr, escapeCode, htmlEntities, htmlTags, ionTags, mustache, mustacheAttr;

window.blaze = {};

window.ionic = {};

window.cube = {};

window.html = {};

window.part = {};

cube.lookup = function(_, v) {
  return function() {
    return Spacebars.call(_.lookup(v));
  };
};

cube.viewLookup = function(_, v) {
  return Blaze.View('lookup:' + v, function() {
    return Spacebars.mustache(_.lookup(v));
  });
};

cube.attrLookup = function(_, v) {
  return Spacebars.mustache(_.lookup(v));
};

htmlTags = 'a abbr acronym address applet area article aside audio b base basefont bdi bdo big blockquote body br button canvas caption center cite code col colgroup command data datagrid datalist dd del details dfn dir div dl dt em embed eventsource fieldset figcaption figure font footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins isindex kbd keygen label legend li link main map mark menu meta meter nav noframes noscript object ol optgroup option output p param pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr track tt u ul var video wbr'.toUpperCase().split(' ');

attributeClass = function(key, value) {
  if (x.isString(value)) {
    return value.replace(/\*/g, x.key2class(key));
  } else {
    return x.key2class(key);
  }
};

htmlEntities = {
  '123': '{',
  '125': '}'
};

escapeCode = function(v) {
  if (x.maybeHtmlEntity(v)) {
    return v.replace(/&#([0-9]{3});/g, function(m, $1) {
      if ($1 in htmlEntities) {
        return htmlEntities[$1];
      } else {
        return m;
      }
    });
  } else {
    return v;
  }
};

mustacheAttr = function(v, f) {
  if (x.maybeMustache(v)) {
    return v.split(/[{}]/).map(function(v, i) {
      if (i % 2 === 1) {
        return f(v);
      } else {
        return escapeCode(v);
      }
    }).filter(function(v) {
      return v;
    });
  } else {
    return escapeCode(v);
  }
};

blazeAttr = function(_, obj) {
  var f, fo, o;

  f = cube.attrLookup.bind(null, _);
  o = x.reduceKeys((fo = x.fixup(obj)), {}, function(o, k) {
    switch (false) {
      case !(x.check('class', k) && fo[k].indexOf('*') > -1):
        return x.object(o, 'class', mustacheAttr(attributeClass(k, fo[k]), f));
      default:
        return x.object(o, k, mustacheAttr(fo[k], f));
    }
  });
  if (x.keys(o).length === 1 && o[x.theKey(o)] === '') {
    return x.theKey(o);
  } else {
    return o;
  }
};

mustache = function(_, a) {
  var f;

  f = cube.viewLookup.bind(null, _);
  if (!x.isArray(a)) {
    return a;
  } else {
    return x.reduce(a, [], function(o, v) {
      return x.array(o, mustacheAttr(v, f));
    });
  }
};

exports.InstallParts = function(_) {
  return x.eachKeys(_, function(k) {
    return x.isFunctionPartKey(k) && (part[k] = _[k]);
  });
};

htmlTags.forEach(function(tag) {
  return html[tag] = function(_, obj, str) {
    var args;

    args = [].slice.call(arguments);
    if (x.isBlazeAttr(obj)) {
      if (args.length === 2) {
        return HTML[tag](blazeAttr(_, obj));
      } else {
        return HTML[tag](blazeAttr(_, obj), mustache(_, args.slice(2)));
      }
    } else {
      if (args.length === 1) {
        return HTML[tag]();
      } else {
        return HTML[tag](mustache(_, args.slice(1)));
      }
    }
  };
});

['Each', 'With'].forEach(function(tag) {
  return blaze[tag] = function(_, lookup, func) {
    return Blaze[tag]((function() {
      return Spacebars.call(_.lookup(lookup));
    }), func);
  };
});

blaze.Include = function(_, name, o) {
  var args, l;

  args = [].slice.call(arguments);
  switch (false) {
    case (l = args.length) !== 2:
      return Spacebars.include(_.lookupTemplate(name));
    case !(l === 3 && x.isBlazeElement(o)):
      return Spacebars.include(_.lookupTemplate(name), function() {
        return args.slice(2);
      });
    case !(l > 3):
      return Blaze._TemplateWith((function() {
        return blazeAttr(_, o);
      }), function() {
        return Spacebars.include(_.lookupTemplate(name), function() {
          return args.slice(3);
        });
      });
    default:
      return Blaze._TemplateWith((function() {
        return blazeAttr(_, o);
      }), function() {
        return Spacebars.include(_.lookupTemplate(name));
      });
  }
};

ionTags = 'Body Content FooterBar HeaderBar Icon Item List Modal NavBackButton NavBar NavView Pane Popover Popup Radio SideMenu SideMenuContent SideMenus Slide SlideBox SubfooterBar SubheaderBar Tab Tabs View'.split(' ');

ionTags.forEach(function(tag) {
  return ionic[tag] = function(_, o) {
    var args, iTag, l;

    args = [].slice.call(arguments);
    iTag = 'ion' + tag;
    switch (false) {
      case (l = args.length) !== 1:
        return Spacebars.include(_.lookupTemplate(iTag));
      case !x.isBlazeElement(o):
        return Spacebars.include(_.lookupTemplate(iTag), function() {
          return args.slice(1);
        });
      case !(l > 2):
        return Blaze._TemplateWith((function() {
          return blazeAttr(_, o);
        }), function() {
          return Spacebars.include(_.lookupTemplate(iTag), function() {
            return args.slice(2);
          });
        });
      default:
        return Blaze._TemplateWith((function() {
          return blazeAttr(_, o);
        }), function() {
          return Spacebars.include(_.lookupTemplate(iTag));
        });
    }
  };
});

/*
   ['contentFor']  .forEach (tag) -> router[tag] = (_, obj) -> Blaze._TemplateWith (-> key = x.theKey obj), (-> Spacebars.include _.lookupTemplate tag), -> x.array obj[key]
   Template['layout'] = new Template 'Template.layout', ->
      Spacebars.include @lookupTemplate('ionBody'), -> [
         Blaze._TemplateWith (-> class: Spacebars.call 'bar-royal'), -> 
            Spacebars.include @lookupTemplate 'ionNavBar'
         Spacebars.include @lookupTemplate('ionNavView'), -> 
            [Spacebars.include @lookupTemplate 'yield']
         Spacebars.include @lookupTemplate 'tabs'
      ]

   Template['tabs'] = new Template 'Template.tabs', ->
      Blaze._TemplateWith (-> class: Spacebars.call 'tabs-icon-top'), ->
         Spacebars.include @lookupTemplate('ionTabs'), -> [
            Blaze._TemplateWith (->
               title: Spacebars.call 'Chat'
               path: Spacebars.call 'chat'
               iconOff: Spacebars.call 'chatbubbles'
               iconOn: Spacebars.call 'chatbubbles'
            ), -> Spacebars.include @lookupTemplate 'ionTab'
            Blaze._TemplateWith (->
               title: Spacebars.call 'Camera'
               path: Spacebars.call 'camera'
               iconOff: Spacebars.call 'camera'
               iconOn: Spacebars.call 'camera'
            ), -> Spacebars.include @lookupTemplate 'ionTab'
            Blaze._TemplateWith (->
               title: Spacebars.call('Spark')
               path: Spacebars.call('spark')
               iconOff: Spacebars.call('flash')
               iconOn: Spacebars.call('flash')
            ), -> Spacebars.include @lookupTemplate 'ionTab'
            Blaze._TemplateWith (->
               title: Spacebars.call('Settings')
               path: Spacebars.call('settings')
               iconOff: Spacebars.call('gear-a')
               iconOn: Spacebars.call('gear-a')
            ), -> Spacebars.include @lookupTemplate 'ionTab'
            Blaze._TemplateWith (->
               title: Spacebars.call('Profile')
               path: Spacebars.call('profile')
               iconOff: Spacebars.call('person')
               iconOn: Spacebars.call('person')
            ), -> Spacebars.include @lookupTemplate 'ionTab'
         ]
   Template['profile'] = new Template 'Template.profile', ->
      [
         Blaze._TemplateWith (-> 'headerTitle'), ->
            Spacebars.include @lookupTemplate('contentFor'), -> [HTML.H1 class: 'title', 'profile']
         Spacebars.include @lookupTemplate('ionContent'), -> [
            Blaze._TemplateWith (->
               class: Spacebars.call 'profile'), ->
                  Spacebars.include @lookupTemplate('ionList'), -> [
                     Blaze.Each (-> Spacebars.call @lookup 'items'), -> [
                        Blaze._TemplateWith (-> 'button-right': Spacebars.call true), ->
                           Spacebars.include @lookupTemplate('ionItem'), -> [
                              HTML.H2 Blaze.View 'lookup:title',   -> Spacebars.mustache @lookup 'title'
                              HTML.P  Blaze.View 'lookup:content', -> Spacebars.mustache @lookup 'content'
                              HTML.BUTTON class: 'button button-positive', 
                                 Blaze._TemplateWith (-> icon: Spacebars.call 'ios-telephone'), -> 
                                    Spacebars.include @lookupTemplate 'ionIcon'
                           ]
                     ]
                  ]
         ]
         Spacebars.include @lookupTemplate('ionSubfooterBar'), -> [
            HTML.BUTTON(
               class: 'button button-block'
               id: 'facebook'
               'login with facebook')
         ]
      ]

   Template['settings'] = new Template 'Template.settings', -> [
      Blaze._TemplateWith (-> 'headerTitle'), ->
         Spacebars.include @lookupTemplate('contentFor'), -> [HTML.H1 class: 'title', 'Settings']
      Spacebars.include @lookupTemplate('ionView'), -> [
         Spacebars.include @lookupTemplate('ionContent'), -> [HTML.P 'hello world!']
      ]
      Spacebars.include @lookupTemplate('ionSubfooterBar'), -> [
         HTML.BUTTON class: 'button button-block', id: 'logout', 'logout'
      ]
   ]
   Template['chat'] = new Template 'Template.chat', -> [
      Blaze._TemplateWith (-> 'headerTitle'), ->
         Spacebars.include @lookupTemplate('contentFor'), -> [
            HTML.H1 class: 'title', 'Chat'
         ]
      HTML.DIV class: 'content', 
         HTML.DIV class: 'content-padded', 
            Blaze.Each (-> Spacebars.call @lookup 'chats'), -> [
               HTML.DIV 
                  id: -> Spacebars.mustache @lookup('id')
                  class: -> ['chat chat-', Spacebars.mustache @lookup 'side']
                  Blaze.View('lookup:text', -> Spacebars.mustache @lookup 'text')
            ]
      Spacebars.include @lookupTemplate('ionSubfooterBar'), -> [
         HTML.INPUT type: 'text', id: 'chat-input0'
      ]
   ]
   Template['spark'] = new Template 'Template.spark', -> [
      Blaze._TemplateWith (-> 'headerTitle'), ->
         Spacebars.include @lookupTemplate('contentFor'), -> [
            HTML.H1 class: 'title', 'Spark'
         ]
      HTML.Raw '<div class="content"><img class="photo photo-back" id="photo-0" src="spark0.jpg"></div>'
   ]
   Template['camera'] = new Template 'Template.camera', -> [
      Blaze._TemplateWith (-> 'headerTitle'), ->
         Spacebars.include @lookupTemplate('contentFor'), -> [
            HTML.H1 'class': 'title', 'Camera'
         ]
      HTML.Raw '<img id="camera-photo" style="width:100%;">'
   ]
   Template['chosenbox'] = new Template 'Template.chosenbox', ->
      HTML.DIV 
         class: 'chosen-container'
         id:    -> ['chosen-', Spacebars.mustache @lookup 'id']
         style: -> ['left:',   Spacebars.mustache(@lookup 'left'), 'px;']
         HTML.IMG id: -> ['chosen-box-', Spacebars.mustache @lookup 'id']
   Template['chosen'] = new Template 'Template.chosen', ->
      HTML.DIV
         id: 'chosen'
         Blaze.Each (-> Spacebars.call @lookup 'chosen'), -> [
            Spacebars.include @lookupTemplate 'chosenbox'
         ]
*/

