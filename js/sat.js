#!/usr/bin/env node
// Generated by CoffeeScript 1.6.2
var Settings, add, add_packages, api, argv, async, build, build_client_path, build_dir, build_lib_path, build_path, build_public_path, cd, chokidar, clean_up, client_dir, coffee, coffee_clean, coffee_compile, coffee_ext, coffee_paths, coffee_watch, collectExt, command, commands, compare_file, cp, cpdir, create, cs, cubesat_path, cwd, daemon, dir_list, directives, dotenv, dotenv_path, eco, env, error, exec, f, fs, func, github_file, github_url, gitpass, hold_watch, home, https, index_basename, index_coffee, index_coffee_path, init_settings, isType, jade, lib_dir, lib_files, loadSettings, log, meteor, meteor_command, meteor_packages, meteor_packages_removed, meteor_publish, meteor_run_ios, meteor_update, mkdir, mobile_packages, mongo_port, mongo_url, my_packages, nconf, no_seperator, nocacheRequire, npm_publish, package_paths, path, prepare_mobile, ps, public_dir, public_files, publish, reTable, readExports, readWrite, remove_packages, rmdir, run, sat_dir, sat_path, settings, settings_json, settings_path, site_path, spawn, spawn_command, start_meteor, start_up, stop_meteor, style_path, stylus, task, tasks, test, test_client_path, test_lib_path, test_packages_path, test_path, test_public_path, toObject, toString, toTidy, update_mobile, updated, version, version_inc, write_build, x, _meteor_publish, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

ps = require('ps-node');

cs = require('coffee-script');

eco = require('eco');

chokidar = require('chokidar');

https = require('https');

jade = require('jade');

stylus = require('stylus');

async = require('async');

dotenv = require('dotenv');

nconf = require('nconf');

api = require('absurd')();

_ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

x = require('cubesat').x;

cs.register();

command = process.argv[2];

argv = require('minimist')(process.argv.slice(3));

add = path.join;

home = process.env.HOME;

cwd = process.cwd();

mongo_port = 27017;

mongo_url = "mongodb://localhost:" + mongo_port + "/meteor";

build_dir = 'build';

index_basename = 'index';

coffee_ext = '.coffee';

index_coffee = index_basename + coffee_ext;

dir_list = (cwd.split('/')).concat([true]);

sat_dir = '.sat';

while (dir_list.pop()) {
  if (fs.existsSync(sat_path = add(dir_list.join('/'), sat_dir))) {
    break;
  }
}

site_path = dir_list.join('/');

if (dir_list.length === 0 && (command !== 'create' && command !== 'update' && command !== 'npm-publish')) {
  console.log('No satellite directory.');
  process.exit(0);
}

fs.existsSync(dotenv_path = add(home, '.env')) && dotenv.config({
  path: dotenv_path
});

fs.existsSync(dotenv_path = add(site_path, '.env')) && dotenv.config({
  path: dotenv_path
});

build_path = add(site_path, build_dir);

index_coffee_path = add(site_path, index_coffee);

env = function(v) {
  var _path;

  return (_path = process.env[v]) && _path.replace(/^~\//, home + '/');
};

cubesat_path = env('CUBESAT_PATH') || add(home, '.cubesat');

settings_path = env('SETTINGS_PATH') || add(cubesat_path, 'settings.coffee');

nocacheRequire = function(f) {
  return delete require.cache[f] && require(f);
};

loadSettings = function(f) {
  return (fs.existsSync(f) && x.func((nocacheRequire(f)).Settings)) || {};
};

Settings = loadSettings(settings_path);

(f = function(o) {
  return x.keys(o).forEach(function(k) {
    if (x.isObject(o[k])) {
      return o[k] = f(o[k]);
    } else {
      return o[k] = x.func(o[k]);
    }
  });
})(Settings);

settings_json = add(build_path, 'settings.json');

nconf.file({
  file: add(sat_path, 'config.json')
});

this.Theme = this.Modules = {};

init_settings = function() {
  var local, site;

  Settings = loadSettings(settings_path);
  x.extend(Settings, loadSettings(index_coffee_path));
  (site = Settings.site) && (local = Settings.local) && local[site] && x.extend(Settings, local[site]);
  return this.Settings = Settings;
};

init_settings();

lib_dir = 'lib';

client_dir = 'client';

public_dir = 'public';

build_client_path = add(build_path, client_dir);

build_lib_path = add(build_path, lib_dir);

build_public_path = add(build_path, public_dir);

style_path = add(site_path, 'style');

lib_files = x.toArray(Settings.lib_files);

my_packages = x.toArray(Settings.packages);

public_files = x.toArray(Settings.public_files);

if (test_path = env('TEST_PATH') || Settings.test_path) {
  test_client_path = add(test_path, client_dir);
  test_lib_path = add(test_path, lib_dir);
  test_public_path = add(test_path, public_dir);
  test_packages_path = add(test_path, 'packages');
  package_paths = my_packages.map(function(p) {
    return add(test_packages_path, p);
  });
}

coffee_paths = function() {
  return (fs.readdirSync(site_path)).filter(function(f) {
    return coffee_ext === path.extname(f);
  }).map(function(f) {
    return add(site_path, f);
  });
};

updated = 'updated time';

log = function() {
  return (arguments != null) && ([].slice.call(arguments)).forEach(function(str) {
    return fs.appendFile(home + '/.log.io/cake', str, function(err) {
      if (err) {
        return console.log(err);
      }
    });
  });
};

error = function(e) {
  return e && (console.error(e) || 1);
};

isType = function(file, type) {
  return path.extname(file) === '.' + type;
};

collectExt = function(dir, ext) {
  return (fs.existsSync(dir) || '') && ((fs.readdirSync(dir)).map(function(file) {
    if (isType(file, ext)) {
      return fs.readFileSync(add(dir, file));
    } else {
      return '';
    }
  })).join('\n');
};

cd = function(dir) {
  return process.chdir(dir);
};

func = function(f) {
  if ('function' === typeof f) {
    return f();
  } else {
    return true;
  }
};

rmdir = function(dir, f) {
  if (fs.existsSync(dir)) {
    fs.readdirSync(dir).forEach(function(file, index) {
      var curPath;

      if (fs.lstatSync(curPath = add(dir, file)).isDirectory()) {
        return rmdir(curPath);
      } else {
        return fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(dir);
  }
  func(f);
  return dir;
};

mkdir = function(dir, f) {
  return dir && fs.readdir(dir, function(e, l) {
    return e && fs.mkdir(dir, function(e) {
      return e || (f && f());
    });
  });
};

compare_file = function(source, target) {
  return false;
};

cp = function(source, target) {
  return !compare_file(source, target) && fs.readFile(source, function(e, data) {
    return error(e) || fs.readFile(target, function(e, data_t) {
      return e || (data.length > 0 && data.toString() !== data_t.toString()) && fs.writeFile(target, data, function() {});
    });
  });
};

cpdir = function(source, target) {
  return fs.readdir(source, function(e, list) {
    return list.map(function(f) {
      var t_f, _path;

      if (f.match(/^\./)) {
        return '';
      } else if ((fs.lstatSync(_path = add(source, f))).isDirectory()) {
        return mkdir((t_f = add(target, f)), function() {
          return cpdir(_path, t_f);
        });
      } else {
        return cp(_path, add(target, f));
      }
    });
  });
};

clean_up = function() {
  rmdir(build_client_path);
  return rmdir(build_lib_path);
};

daemon = function() {
  return ps.lookup({
    command: 'node',
    psargs: 'ux'
  }, function(e, a) {
    var node_ps;

    node_ps = a.map(function(p) {
      var _ref1, _ref2, _ref3;

      return (_ref1 = (_ref2 = p["arguments"]) != null ? (_ref3 = _ref2[0]) != null ? _ref3.match(/\/(log\.io-[a-z]+)$/) : void 0 : void 0) != null ? _ref1[1] : void 0;
    });
    __indexOf.call(node_ps, 'log.io-server') >= 0 || spawn('log.io-server', [], {
      stdio: 'inherit'
    });
    return __indexOf.call(node_ps, 'log.io-harvester') >= 0 || setTimeout((function() {
      return spawn('log.io-harvester', [], {
        stdio: 'inherit'
      });
    }), 100);
  });
};

coffee_clean = function() {
  return ps.lookup({
    command: 'node',
    psargs: 'ux'
  }, function(e, a) {
    return a.map(function(p) {
      var _ref1;

      return '-wbc' === ((_ref1 = p["arguments"]) != null ? _ref1[3] : void 0) && process.kill(p.pid, 'SIGKILL');
    });
  });
};

coffee_watch = function(c, js) {
  return spawn('coffee', ['-o', js, '-wbc', c], {
    stdio: 'inherit'
  });
};

coffee_compile = function() {
  var coffee_dir, js_dir;

  mkdir(build_lib_path);
  coffee_dir = [site_path];
  js_dir = [build_lib_path];
  package_paths && package_paths.map(function(p) {
    coffee_dir.push(add(p, 'coffee'));
    return js_dir.push(add(p, 'js'));
  });
  return ps.lookup({
    command: 'node',
    psargs: 'ux'
  }, function(e, a) {
    return a.map(function(p, i) {
      var c, _ref1;

      if ('-wbc' === ((_ref1 = p["arguments"]) != null ? _ref1[3] : void 0) && ((c = p["arguments"][4]) != null)) {
        if ((i = coffee_dir.indexOf(c)) < 0) {
          process.kill(p.pid, 'SIGKILL');
        } else {
          [coffee_dir.splice(i, 1), js_dir.splice(i, 1)];
        }
      }
      return a.length - 1 === i && coffee_dir.map(function(c, j) {
        return coffee_watch(c, js_dir[j]);
      });
    });
  });
};

meteor = function(dir, port) {
  if (port == null) {
    port = '3000';
  }
  cd(dir);
  return spawn('meteor', ['--port', port, '--settings', settings_json], {
    stdio: 'inherit'
  });
};

stop_meteor = function(func) {
  return ps.lookup({
    psargs: 'ux'
  }, function(err, a) {
    return a.map(function(p, i) {
      ['3000', '3300'].map(function(port) {
        var _ref1, _ref2;

        if ('--port' === ((_ref1 = p["arguments"]) != null ? _ref1[1] : void 0) && port === ((_ref2 = p["arguments"]) != null ? _ref2[2] : void 0)) {
          return process.kill(p.pid, 'SIGKILL');
        }
      });
      return a.length - 1 === i && (func != null) && func();
    });
  });
};

meteor_update = function() {
  cd(site_meteor_path);
  return spawn('meteor', ['update'], {
    stdio: 'inherit'
  });
};

meteor_publish = function() {
  return spawn('meteor', ['publish'], {
    stdio: 'inherit'
  });
};

meteor_command = function(command, argument, path) {
  cd(path);
  console.log('meteor', command, argument);
  return spawn('meteor', [command, argument], {
    stdio: 'inherit'
  });
};

spawn_command = function(bin, command, args, path) {
  path && cd(path);
  console.log(bin, command, args.join(' '));
  return spawn(bin, [command].concat(args), {
    stdio: 'inherit'
  });
};

start_meteor = function() {
  return stop_meteor(function() {
    return meteor(test_path, '3300');
  });
};

hold_watch = function(sec) {
  return updated = process.hrtime()[0] + sec;
};

start_up = function() {
  coffee_alone();
  lib_paths.concat([index_coffee_path]).map(function(f) {
    return chokidar.watch(f).on('change', function() {
      return build();
    });
  });
  hold_watch(2);
  package_paths.map(function(p) {
    return chokidar.watch(p).on('change', function(f) {
      var dir_f;

      if (updated < process.hrtime()[0]) {
        nconf.set('updated_packages', ((nconf.get('updated_packages')) || []).concat([dir_f = path.dirname(f)]).filter(function(v, i, a) {
          return a.indexOf(v) === i;
        }));
        return console.log(new Date(), 'Changed', f);
      }
    });
  });
  return commands();
};

commands = function() {
  var rl;

  rl = require('readline').createInterface(process.stdin, process.stdout);
  rl.setPrompt('');
  return rl.on('line', function(line) {
    switch ((line = line.replace(/\s{2,}/g, ' ').trim().split(' '))[0]) {
      case '.':
        return console.log('hi');
      case 'build':
        return build();
      case 'time':
        return console.log(new Date());
      case 'publish':
        return publish();
      case 'update':
        return meteor_update();
      case 'settings':
        return settings();
      case 'coffee':
        switch (line[1]) {
          case 'alone':
            return coffee_alone();
          case 'clean':
            return coffee_clean();
        }
        break;
      case 'meteor':
        return start_meteor();
      case 'packages':
        console.log(nconf.get('updated_packages'));
        return nconf.save();
      case 'get':
        return console.log(nconf.get(line[1]));
      case 'set':
        return nconf.set(line[1], line[2]);
      case 'stop':
        return 'meteor' === line[1] && stop_meteor();
      case '':
        return '';
      default:
        return console.log('?');
    }
  }).on('close', function() {
    console.log('bye!');
    coffee_clean();
    nconf.save();
    rl.close();
    return process.exit(1);
  });
};

meteor_packages_removed = 'autopublish insecure'.split(' ');

meteor_packages = 'service-configuration accounts-password fortawesome:fontawesome http iron:router isaac:cubesat jquery mizzao:bootstrap-3 mizzao:jquery-ui mquandalle:jade stylus'.split(' ');

mobile_packages = [];

meteor_run_ios = function() {
  return meteor_command('run', 'ios', mobile_path);
};

add_packages = function() {
  return (meteor_packages.concat(mobile_packages).reduce((function(f, p) {
    return function() {
      return (meteor_command('add', p, mobile_path)).on('exit', f);
    };
  }), meteor_run_ios))();
};

remove_packages = function() {
  return (meteor_packages_removed.reduce((function(f, p) {
    return function() {
      return (meteor_command('remove', p, mobile_path)).on('exit', f);
    };
  }), add_packages))();
};

prepare_mobile = function() {
  'client lib public resources'.split(' ').map(function(d) {});
  'mobile.html mobile.css mobile.js'.split(' ').map(function(f) {
    return fs.unlink(add(mobile_path, f), function(e) {
      return error(e);
    });
  });
  return (['install-sdk', 'add-platform'].reduce((function(f, c) {
    return function() {
      return (meteor_command(c, 'ios', mobile_path)).on('exit', f);
    };
  }), remove_packages))();
};

update_mobile = function() {
  return rmdir(mobile_path, function() {
    return (meteor_command('create', mobile_path, work)).on('exit', prepare_mobile);
  });
};

settings = function() {
  init_settings();
  delete Settings.local;
  console.log(settings_json);
  return fs.writeFile(settings_json, JSON.stringify(Settings, '', 4) + '\n', function(e, data) {
    return console.log(new Date() + 'Settings');
  });
};

publish = function() {
  var updated_packages, version;

  version = {};
  updated_packages = nconf.get('updated_packages');
  return my_packages.map(function(v, i) {
    var isLast, package_dir, package_js;

    package_dir = add(test_packages_path, v);
    package_js = add(package_dir, 'package.js');
    isLast = my_packages.length - 1 === i;
    return (true || isLast || -1 < updated_packages.indexOf(package_dir)) && fs.readFile(package_js, 'utf8', function(e, data) {
      data.match(/version:\s*['"]([0-9.]+)['"]\s*,/m);
      version[v] = ((RegExp.$1.split('.')).map(function(w, j) {
        if (j === 2) {
          return String(Number(w) + 1);
        } else {
          return w;
        }
      })).join('.');
      data = data.replace(/(version:\s*['"])[0-9.]+(['"])/m, "$1" + version[v] + "$2");
      if (!isLast) {
        hold_watch(1);
        return fs.writeFile(package_js, data, 'utf8', function(e) {
          return e && console.log(new Date, e);
        });
      } else {
        async.map(x.keys(version), function(p) {
          return data = data.replace(new RegExp("api\.use\\('" + p + ".+$", 'm'), "api.use('" + p + "@" + version[p] + "');");
        });
        hold_watch(1);
        return fs.writeFile(package_js, data, 'utf8', function(e) {
          nconf.set('updated_packages', []);
          nconf.save();
          return e || x.keys(version).concat([my_packages[my_packages.length - 1]]).filter(function(v, i, a) {
            return a.indexOf(v) === i;
          }).map(function(d) {
            console.log(new Date, 'Publishing', d);
            cd(add(test_packages_path, d));
            return meteor_publish();
          });
        });
      }
    });
  });
};

coffee = function(data) {
  return cs.compile('#!/usr/bin/env node\n' + data, {
    bare: true
  });
};

directives = {
  jade: {
    file: '1.jade',
    f: function(n, b) {
      b = x.indent(b, 1);
      return "template(name='" + n + "')\n" + b + "\n\n";
    }
  },
  jade$: {
    file: '2.html',
    f: function(n, b) {
      b = x.indent(b, 1);
      return jade.compile("template(name='" + n + "')\n" + b + "\n\n", null)();
    }
  },
  HTML: {
    file: '3.html',
    f: function(n, b) {
      b = x.indent(b, 1);
      return "<template name=\"" + n + "\">\n" + b + "\n</template>\n";
    }
  },
  head: {
    file: '0.jade',
    header: function() {
      return 'head\n';
    },
    f: function(n, b) {
      return x.indent(b, 1) + '\n';
    }
  },
  less: {
    file: '7.less',
    f: function(n, b) {
      return b + '\n';
    }
  },
  css: {
    file: '5.css',
    header: function() {
      return collectExt(style_path, 'css') + '\n';
    },
    f: function(n, b) {
      return b + '\n';
    }
  },
  styl: {
    file: '4.styl',
    f: function(n, b) {
      return b + '\n\n';
    }
  },
  styl$: {
    file: '6.css',
    f: function(n, b) {
      return stylus(b).render() + '\n';
    }
  }
};

write_build = function(file, data) {
  var fwrite;

  return data.length > 0 && fs.readFile(fwrite = add(build_client_path, file), 'utf8', function(err, d) {
    return ((d == null) || data !== d) && fs.writeFile(fwrite, data, function(e) {
      return console.log(new Date(), fwrite);
    });
  });
};

toObject = function(v) {
  var o, r;

  if (v == null) {
    return {};
  } else if (x.isFunction(v)) {
    if (x.isScalar(r = v.call(this))) {
      return r;
    } else {
      return toObject(r);
    }
  } else if (x.isArray(v)) {
    return v.reduce((function(o, w) {
      return x.extend(o, toObject(w));
    }), {});
  } else if (x.isObject(v)) {
    return x.keys(v).reduce((function(o, k) {
      o[k] = x.isScalar(r = v[k]) ? r : toObject(r);
      return o;
    }), {});
  } else if (x.isString(v)) {
    return ((o = {})[v] = '') || o;
  }
};

no_seperator = 'jade jade$'.split(' ');

toTidy = function(v, d) {
  if (x.isString(v[d])) {
    return v[d];
  } else {
    return x.tideValue(x.tideKey(toObject(v[d]), v.id, __indexOf.call(no_seperator, d) >= 0 ? '' : ' '));
  }
};

toString = function(v, d) {
  var data, str;

  if (x.isString(v[d])) {
    str = v[d];
  } else {
    v[d] = toObject(v[d]);
    str = x.indentStyle(toTidy(v, d));
  }
  if (x.isEmpty(data = toObject(v.eco))) {
    return str;
  } else {
    return eco.render(str, toObject(data));
  }
};

readExports = function(f, kind) {
  var base;

  return x.func(index_basename === (base = path.basename(f, coffee_ext)) ? (nocacheRequire(f))[kind] : (updateRequire(f))[base][kind]);
};

build = function() {
  console.log(new Date() + 'build');
  init_settings();
  mkdir(build_client_path);
  this.Modules = coffee_paths().reduce((function(o, f) {
    return x.extend(o, readExports(f, 'Modules'));
  }), {});
  x.keys(this.Modules).map(function(name) {
    return x.module(name, this.Modules[name]);
  });
  x.keys(directives).map(function(d) {
    var it;

    return write_build((it = directives[d]).file, (x.func(it.header) || '') + x.keys(this.Modules).map(function(n) {
      var b;

      return (b = toString(this.Modules[n], d)) && it.f.call(this, n, b);
    }).filter(function(o) {
      return o != null;
    }).join(''));
  });
  return x.keys(this.Modules).map(function(n, i) {
    return this.Modules[n].absurd && api.add(toTidy(this.Modules[n], 'absurd'));
  }).concat([write_build('absurd.css', api.compile())]);
};

gitpass = function() {
  prompt.message = 'github';
  prompt.start();
  return prompt.get({
    name: 'password',
    hidden: true
  }, function(err, result) {
    fs.writeFileSync(add(home, '/.netrc'), "machine github.com\n    login i4han\n    password " + result.password, {
      flag: 'w+'
    });
    return Config.quit(process.exit(1));
  });
};

github_file = function(file) {
  var req;

  req = https.request({
    host: 'raw.githubusercontent.com',
    port: 443,
    method: 'GET',
    path: add('/', argv.user || 'i4han', argv.repo || 'sat-init', argv.branch || 'master', path.basename(file))
  }, function(res) {
    res.setEncoding('utf8');
    return res.on('data', function(b) {
      return fs.writeFile(file, b, 'utf8', function(e) {
        return console.log('written:', file);
      });
    });
  });
  req.end();
  return req.on('error', function(e) {
    return console.log('problem with request: ' + e.message);
  });
};

github_url = function(id_slash_repo) {
  return 'https://github.com/' + (id_slash_repo || 'i4han/sat-init') + '.git';
};

create = function() {
  var site;

  site = argv._[0];
  site.length > 0 || console.error("Can not create", site);
  return fs.mkdir(site, function(e) {
    e && (console.log("Can not create", site, "\nAlready exists?") || process.exit(1));
    return (spawn_command('git', 'clone', [github_url(), '.'], site)).on('exit', function(code) {
      code && (console.log('Git exited with error.') || process.exit(1));
      mkdir(add((site_path = process.cwd()), sat_dir));
      return (meteor_command('create', build_dir, site_path)).on('exit', function() {
        build_path = add(site_path, build_dir);
        return (meteor_packages_removed.reduce((function(f, p) {
          return function() {
            return (meteor_command('remove', p, build_path)).on('exit', f);
          };
        }), function() {
          return (meteor_packages.concat(mobile_packages).reduce((function(f, p) {
            return function() {
              return (meteor_command('add', p, build_path)).on('exit', f);
            };
          }), function() {
            return '.html .css .js'.split(' ').map(function(f) {
              return fs.unlink(add(build_path, build_dir + f), function(e) {
                return error(e);
              });
            });
          }))();
        }))();
      });
    });
  });
};

reTable = {
  npmre: new RegExp("(\"version\"\\s*:\\s*['\"])([0-9.]+)(['\"]\\s*,)", 'm'),
  npm: /("version"\s*:\s*['"])([0-9.]+)(['"]\s*,)/m
};

version_inc = function(data, re) {
  var version;

  data.match(re);
  console.log('verion:', version = RegExp.$2.split('.').map(function(w, j) {
    if (j === 2) {
      return String(+w + 1);
    } else {
      return w;
    }
  }).join('.'));
  return data.replace(re, "$1" + version + "$3");
};

readWrite = function(file, func) {
  return fs.readFile(file, 'utf8', function(e, data) {
    return error(e) || fs.writeFile(file, func(data, 'utf8', function(err) {
      return error(err);
    }));
  });
};

npm_publish = function() {
  var package_path;

  if (!test_path) {
    console.log('$TEST_PATH is null') || process.exit(0);
  }
  readWrite(add(package_path = add(test_packages_path, 'isaac:cubesat'), 'package.json'), function(data) {
    return version_inc(data, reTable.npmre);
  });
  return spawn_command('npm', 'publish', ['.'], package_path);
};

_meteor_publish = function() {
  return 0;
};

run = function() {
  settings();
  coffee_compile();
  build();
  return spawn_command('meteor', 'run', ['--settings', settings_json, '--port', '3000'], build_path);
};

test = function() {
  if (!test_path) {
    console.log('$TEST_PATH is null') || process.exit(0);
  }
  'client server lib public private'.split(' ').forEach(function(d) {
    var target;

    return fs.unlink(target = add(test_path, d), function() {
      var source;

      return fs.existsSync(source = add(build_path, d)) && fs.symlink(source, target, 'dir', function() {
        return console.log(new Date(), source);
      });
    });
  });
  return spawn_command('meteor', 'run', ['--settings', settings_json, '--port', '3300'], test_path);
};

version = function() {
  return console.log("version:", "0.4.18");
};

tasks = {
  test: {
    call: (function() {
      return test();
    }),
    description: 'Test environment.'
  },
  create: {
    call: (function() {
      return create();
    }),
    description: 'Create a project.'
  },
  run: {
    call: (function() {
      return run();
    }),
    description: 'Run meteor server.'
  },
  build: {
    call: (function() {
      return build();
    }),
    description: 'Build meteor client files.'
  },
  settings: {
    call: (function() {
      return settings();
    }),
    description: 'Settings'
  },
  version: {
    call: (function() {
      return version();
    }),
    description: 'Print version'
  },
  publish: {
    call: (function() {
      return publish();
    }),
    description: 'Publish Meteor packages.'
  },
  coffee: {
    call: (function() {
      return coffee_compile();
    }),
    description: 'Watching coffee files to complie.'
  },
  'npm-publish': {
    call: (function() {
      return npm_publish();
    }),
    description: 'Publish cubesat to npm'
  }
};

(task = tasks[command]) && task.call();

task || x.keys(tasks).map(function(k) {
  return console.log('  ', (k + Array(15).join(' ')).slice(0, 16), tasks[k].description);
});
