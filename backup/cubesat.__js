// Generated by CoffeeScript 1.8.0
var Cube, Module, Parts, Settings, View;

if (typeof Meteor === "undefined" || Meteor === null) {
  global.cube = {};
  global.__ = require('underscore2').__;
}

Module = (function() {
  function Module(name) {
    if (typeof Sat !== "undefined" && Sat !== null) {
      if (name in Sat.module) {
        return Sat.module[name];
      } else {
        Sat.module[name] = this;
      }
    }
    this.property = {};
    this.style = {};
    this.helper = {};
    this.event = {};
    this.method = {};
    this.collection = {};
    this.property.name = name;
    this.property.label = __.capitalize(name);
  }

  Module.prototype.name = function() {
    return this.property.name;
  };

  Module.prototype.local = function(id) {
    var uniqueName;
    uniqueName = this.name() + (this.property.hash ? '-' + this.property.hash : '');
    if (id[0] === '#') {
      return '#' + uniqueName + '-' + id.slice(1);
    } else {
      return uniqueName + '-' + id;
    }
  };

  Module.prototype.template = function(template) {
    if (arguments.length === 0) {
      return this._template;
    } else {
      return __.object(this, '_template', template);
    }
  };

  Module.prototype.init = function(f) {
    this._init = f;
    return this;
  };

  Module.prototype.assign = function(k, o) {
    __.assign(this[k], __["return"].call(this, o));
    return this;
  };

  Module.prototype.properties = function(o) {
    this._properties = o;
    return this.assign('property', o);
  };

  Module.prototype.styles = function(o) {
    this._styles = o;
    return this.assign('style', o);
  };

  Module.prototype.helpers = function(o) {
    this._helpers = o;
    return this.assign('helper', o);
  };

  Module.prototype.events = function(o) {
    this._events = o;
    return this.assign('event', o);
  };

  Module.prototype.methods = function(o) {
    this._methods = o;
    return this.assign('method', o);
  };

  Module.prototype.collections = function(o) {
    this._collections = o;
    return this.assign('collection', o);
  };

  Module.prototype.onStartup = function(f) {
    return __.object(this, 'onstartup', f);
  };

  Module.prototype.onServer = function(f) {
    return __.object(this, 'onserver', f);
  };

  Module.prototype.onRendered = function(f) {
    return __.object(this, 'onrendered', f);
  };

  Module.prototype.onDestroyed = function(f) {
    return __.object(this, 'ondestroyed', f);
  };

  Module.prototype.onCreated = function(f) {
    return __.object(this, 'oncreated', f);
  };

  Module.prototype.fn = function(o) {
    __.eachKeys(o, ((function(_this) {
      return function(k) {
        return console.log(k) || (_this[k] = o[k].bind(_this));
      };
    })(this)));
    return this;
  };

  Module.prototype.$ = function(v) {
    return $(this.local(v));
  };

  Module.prototype.close = function(name) {
    name && (name !== this.name()) && console.error('Created module name and close name doesn\'t match', name, this.name());
    'style helper event method collection'.split(' ').forEach((function(_this) {
      return function(p) {
        return _this.assign(p, _this['_' + p + 's']);
      };
    })(this));
    this.assign('property', this._properties);
    this._init && this._init.call(this);
    return this;
  };

  return Module;

})();

Parts = (function() {
  function Parts(parts) {
    console.log(parts);
    this.part = this.part || {};
    this.attrPart = this.attrPart || {};
    parts = __["return"].call(__["return"](parts), parts);
    __.eachKeys(parts, (function(_this) {
      return function(k) {
        __.isFunctionPartKey(k) && (_this.part[k] = parts[k]);
        return __.isAttrPartKey(k) && (_this.attrPart[k] = parts[k]);
      };
    })(this));
    if (typeof Sat !== "undefined" && Sat !== null) {
      __.assign(Sat.part, this.part);
      __.assign(Sat.attrPart, this.attrPart);
    }
  }

  return Parts;

})();

Settings = (function() {
  function Settings(settings) {
    var f;
    if ((typeof Meteor === "undefined" || Meteor === null) || Meteor.isServer) {
      settings = __["return"].call(__["return"](settings), settings);
      (f = function(o) {
        return __.keys(o).forEach(function(k) {
          switch (false) {
            case !__.isObject(o[k]):
              return f(o[k]);
            case !__.isFunction(o[k]):
              return o[k] = __["return"].call(settings, o[k]);
          }
        });
      })(settings);
      this.setting = settings;
      if (typeof Sat !== "undefined" && Sat !== null) {
        Sat.setting = settings;
      }
    } else if (__.isEmpty(Sat.settings)) {
      Sat.setting = Meteor.settings;
    }
  }

  return Settings;

})();

Cube = (function() {
  function Cube() {
    this.module = {};
    this.part = {};
    this.setting = {};
  }

  Cube.prototype.add = function(i) {
    switch (false) {
      case !(i instanceof Module):
        this.module[i.name()] = i;
        break;
      case !(i instanceof Parts):
        __.assign(this.part, i.part);
        break;
      case !(i instanceof Settings):
        __.assign(this.setting, i.setting);
    }
    return this;
  };

  Cube.prototype.finish = function() {
    return this;
  };

  return Cube;

})();

View = (function() {
  function View(view) {
    this.view = view;
    __.keys(Sat.part).forEach((function(_this) {
      return function(k) {
        return _this[k] = Sat.part[k].bind(Sat.part, view);
      };
    })(this));
  }

  return View;

})();

cube.Cube = function() {
  return new Cube();
};

cube.Module = function(name) {
  return new Module(name);
};

cube.Parts = function(parts) {
  return new Parts(parts);
};

cube.Settings = function(settings) {
  return new Settings(settings);
};

cube.View = function(view) {
  return [new View(view), __.module(view)];
};


/*
cube.Template = (view) ->
   args = [].slice.call arguments
   args[1..]
 */

if (typeof Meteor === "undefined" || Meteor === null) {
  module.exports = cube;
}
