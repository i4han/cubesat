// Generated by CoffeeScript 1.6.2
var collections, mongo, mongoClient, mongoServer, s,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

collections = (s = Meteor.settings) && s["public"] ? s["public"].collections : {};

mongo = {
  connected: []
};

mongoServer = function(cs, that) {
  return x.keys(cs).filter(function(c) {
    return __indexOf.call(mongo.connected, c) < 0;
  }).map(function(k) {
    mongo.connected.push(k);
    db[k] = new Mongo.Collection(k);
    db[k].allow(x["return"](cs[k].allow, that) || {
      insert: function(doc) {
        return false;
      },
      update: function(userId, doc, fields, modifier) {
        return false;
      },
      remove: function(userId, doc) {
        return false;
      }
    });
    db[k].deny(x["return"](cs[k].deny, that) || {});
    Meteor.publish(k, cs[k].publish ? function() {
      return cs[k].publish.call(that);
    } : function() {
      return db[k].find({});
    });
    return cs[k].collections && mongoServer(cs[k].collections, that);
  });
};

mongoClient = function(cs, that) {
  return x.keys(cs).filter(function(c) {
    return __indexOf.call(mongo.connected, c) < 0;
  }).map(function(k) {
    var cb;

    mongo.connected.push(k);
    db[k] = new Mongo.Collection(k);
    Meteor.subscribe(k, x.isObject(cb = cs[k].callback) ? function() {
      return cb.call(that);
    } : function() {
      return x["return"](cb, that);
    });
    return cs[k].collections && mongoClient(cs[k].collections, that);
  });
};

Meteor.startup(function() {
  var Modules;

  Modules = x["return"](exports.Modules);
  x.keys(exports).filter(function(k) {
    return /[a-z]/.test(k[0]);
  }).map(function(f) {
    return x.assign(Modules, x["return"](exports[f].Modules));
  });
  x.keys(this.Modules = Modules).map(function(n) {
    return x.module.call(this, n, Modules[n] = x["return"](Modules[n], x["return"](Modules[n])));
  });
  if (Meteor.isServer) {
    x.isEmpty(collections) || mongoServer(collections);
    return x.keys(Modules).map(function(n) {
      var _;

      _ = x["return"](Modules[n], x["return"](Modules[n]));
      _.methods && Meteor.methods(x["return"](_.methods, _));
      _.collections && mongoServer(x["return"](_.collections, _), _);
      return _.onServer && _.onServer.call(_);
    });
  } else if (Meteor.isClient) {
    x.isEmpty(collections) || mongoClient(collections);
    Router.configure({
      layoutTemplate: 'layout'
    });
    x.keys(Modules).map(function(n) {
      var _;

      _ = x["return"](Modules[n], x["return"](Modules[n]));
      _.collections && mongoClient(x["return"](_.collections, _), _);
      _.onStartup && _.onStartup.call(_);
      _.path && Router.route(n, x["return"]({
        path: _.path
      }));
      _.events && Template[n].events(x.tideEventKey(x["return"](_.events, _), _[x.f.id]));
      _.helpers && Template[n].helpers(x["return"](_.helpers, _));
      _.on$Ready && $(function($) {
        return _.on$Ready.call(_);
      });
      _.onDeviceReady && document.addEventListener('deviceready', _.onDeviceReady);
      return ('onCreated onRendered onDestroyed'.split(' ')).forEach(function(d) {
        return _[d] && Template[n][d](function() {
          return _[d].call(_);
        });
      });
    });
    return $(function($) {
      var k, _results;

      o.$.map(function(f) {
        return f();
      });
      _results = [];
      for (k in x.$) {
        _results.push($.fn[k] = x.$[k]);
      }
      return _results;
    });
  }
});
